name: CI

on:
  push:
    branches: [ functional-testing ]
  pull_request:
    branches: [ functional-testing ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting (if available)
      run: npm run lint --if-present

    - name: Run tests
      run: npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          __tests__/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project (if build script exists)
      run: npm run build --if-present

    - name: Validate prototype files
      run: |
        echo "Validating prototype structure..."
        ls -la prototype/
        echo "Checking for required files..."
        test -f prototype/garment-visualization/index.html
        test -f prototype/garment-visualization/avatar-loader.js
        test -f prototype/avatar-generator/index.html
        echo "✅ All required prototype files found"

    - name: Test avatar loader functionality
      run: |
        echo "Testing avatar loader..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          const avatarLoaderPath = path.join('prototype', 'garment-visualization', 'avatar-loader.js');
          const content = fs.readFileSync(avatarLoaderPath, 'utf8');
          console.log('✅ Avatar loader file is valid JavaScript');
          if (content.includes('class AvatarLoader')) {
            console.log('✅ AvatarLoader class found');
          } else {
            console.log('❌ AvatarLoader class not found');
            process.exit(1);
          }
        "

    - name: Validate physics engine
      run: |
        echo "Testing physics engine..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          const physicsPath = path.join('prototype', 'garment-visualization', 'physics', 'simple-cloth-physics.js');
          if (fs.existsSync(physicsPath)) {
            const content = fs.readFileSync(physicsPath, 'utf8');
            if (content.includes('class SimpleClothPhysics')) {
              console.log('✅ SimpleClothPhysics class found');
            } else {
              console.log('❌ SimpleClothPhysics class not found');
              process.exit(1);
            }
          } else {
            console.log('⚠️ Physics engine file not found, skipping validation');
          }
        "

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for common security issues..."
        # Check for potential XSS vulnerabilities in HTML files
        if grep -r "innerHTML.*\+" prototype/ --include="*.html" --include="*.js"; then
          echo "⚠️ Potential XSS vulnerability detected"
        else
          echo "✅ No obvious XSS vulnerabilities found"
        fi

  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check bundle sizes
      run: |
        echo "Analyzing file sizes..."
        find prototype/ -name "*.js" -exec wc -c {} + | sort -n
        echo "Checking for large files..."
        find prototype/ -size +1M -type f | while read file; do
          echo "⚠️ Large file detected: $file ($(du -h "$file" | cut -f1))"
        done

    - name: Validate HTML structure
      run: |
        echo "Validating HTML files..."
        find prototype/ -name "*.html" | while read file; do
          echo "Checking $file..."
          # Basic HTML validation
          if grep -q "<!DOCTYPE html>" "$file"; then
            echo "✅ $file has DOCTYPE declaration"
          else
            echo "⚠️ $file missing DOCTYPE declaration"
          fi
        done