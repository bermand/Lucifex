name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting (if available)
      run: |
        if npm run lint --silent > /dev/null 2>&1; then
          npm run lint
        else
          echo "No linting configured, skipping..."
        fi
      continue-on-error: true

    - name: Run tests with coverage and JUnit reporting
      run: npm run test:ci

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: test-results/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.node-version }}
        path: coverage/

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Jest Tests (${{ matrix.node-version }})
        path: test-results/junit.xml
        reporter: jest-junit
        fail-on-error: true

    - name: Comment coverage on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read coverage summary
          try {
            const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const coverageComment = `## ðŸ“Š Test Coverage Report
              
              | Metric | Coverage | 
              |--------|----------|
              | **Statements** | ${total.statements.pct}% (${total.statements.covered}/${total.statements.total}) |
              | **Branches** | ${total.branches.pct}% (${total.branches.covered}/${total.branches.total}) |
              | **Functions** | ${total.functions.pct}% (${total.functions.covered}/${total.functions.total}) |
              | **Lines** | ${total.lines.pct}% (${total.lines.covered}/${total.lines.total}) |
              
              ðŸ“ˆ View detailed coverage report in the artifacts.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }
          } catch (error) {
            console.log('Could not read coverage summary:', error.message);
          }

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project (if build script exists)
      run: |
        if npm run build --silent > /dev/null 2>&1; then
          npm run build
        else
          echo "No build script configured, skipping..."
        fi
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts
        path: |
          dist/
          build/
          public/
        retention-days: 7